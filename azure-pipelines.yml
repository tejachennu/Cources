trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  nodeVersion: '10.x'

steps:
# Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# Install dependencies and build Node.js project
- script: |
    npm install
    npm run build
  displayName: 'npm install and build'

# Build ASP.NET Core project
- script: dotnet build --configuration $(buildConfiguration)
  displayName: 'dotnet build $(buildConfiguration)'

# Test ASP.NET Core project
- script: dotnet test --configuration $(buildConfiguration)
  displayName: 'dotnet test $(buildConfiguration)'

# Publish ASP.NET Core project
- script: dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
  displayName: 'dotnet publish $(buildConfiguration)'

# Create a NuGet package
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    configuration: '$(buildConfiguration)'
    outputDir: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Create NuGet package'

# Deploy ASP.NET Core project (example, customize as needed)
- task: AzureRmWebAppDeployment@4
  inputs:
    azureSubscription: 'cources' # Replace with your service connection name
    appType: 'webApp'
    WebAppName: 'cources' # Replace with your web app name
    packageForLinux: '$(Build.ArtifactStagingDirectory)/<your_package>.zip' # Ensure this path is correct
  displayName: 'Deploy ASP.NET Core project'

# Save build artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish build artifacts'
